// <auto-generated />
using System;
using LifetimeLiveHouse.Access.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LifetimeLiveHouse.Access.Migrations
{
    [DbContext(typeof(LifetimeLiveHouseSysDBContext))]
    partial class LifetimeLiveHouseSysDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttendanceRecord", b =>
                {
                    b.Property<long>("AttendanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AttendanceID"));

                    b.Property<long>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PunchInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PunchOutTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("AttendanceRecord");
                });

            modelBuilder.Entity("BandRole", b =>
                {
                    b.Property<string>("BandRoleID")
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BandRoleID");

                    b.ToTable("BandRole");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.Property<long>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartID"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.HasKey("CartID");

                    b.HasIndex("MemberID");

                    b.HasIndex("ProductID");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Property<string>("CateID")
                        .HasMaxLength(5)
                        .HasColumnType("nchar");

                    b.Property<string>("CateName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CateID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Coupon", b =>
                {
                    b.Property<long>("cNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("cNo"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("money");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<string>("cDesc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("cNo");

                    b.HasIndex("MemberID");

                    b.HasIndex("ProductID");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("EmployeeAccount", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Email");

                    b.HasIndex("EmployeeID")
                        .IsUnique();

                    b.ToTable("EmployeeAccount");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventID"));

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("EventPicture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RegistrationFee")
                        .HasColumnType("money");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("EventID");

                    b.HasIndex("MemberID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventStatus", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StatusCode");

                    b.ToTable("InstrumentCategory");
                });

            modelBuilder.Entity("Instrument", b =>
                {
                    b.Property<long>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InstrumentID"));

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("InstrumentPhoto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OutRentTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentFeePerHour")
                        .HasColumnType("money");

                    b.Property<DateTime>("RentTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("InstrumentID");

                    b.HasIndex("MemberID");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EmployeeID");

                    b.HasIndex("RoleCode");

                    b.HasIndex("StoreID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.EmployeeRole", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("RoleCode");

                    b.ToTable("EmployeeRole");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Member", b =>
                {
                    b.Property<long>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MemberID"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Cash")
                        .HasColumnType("money");

                    b.Property<string>("CellphoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.HasKey("MemberID");

                    b.HasIndex("Picture");

                    b.HasIndex("StatusCode");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.MemberVerificationStatus", b =>
                {
                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<bool>("EmailVerificationStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("PhoneVerificationStatus")
                        .HasColumnType("bit");

                    b.HasKey("MemberID");

                    b.ToTable("MemberVerificationStatus");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.News", b =>
                {
                    b.Property<long>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NewsID"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NewsID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.PasswordResetToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberID");

                    b.ToTable("PasswordResetToken");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.ProductStatus", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StatusCode");

                    b.ToTable("ProductStatus");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.RegisteredEvent", b =>
                {
                    b.Property<long>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecordID"));

                    b.Property<long>("EventID")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.HasKey("RecordID");

                    b.HasIndex("MemberID");

                    b.ToTable("RegisteredEvent");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Store", b =>
                {
                    b.Property<long>("StoreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoreID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RentFeePerHour")
                        .HasColumnType("money");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("sTel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StoreID");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Live", b =>
                {
                    b.Property<long>("LiveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LiveID"));

                    b.Property<decimal>("Admission")
                        .HasColumnType("money");

                    b.Property<string>("BandRoleID")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LiveName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("LiveSong")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("LiveID");

                    b.HasIndex("BandRoleID");

                    b.ToTable("Live");
                });

            modelBuilder.Entity("LoginRecord", b =>
                {
                    b.Property<long>("RecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecordID"));

                    b.Property<long>("ContinuousLoginDate")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<string>("Record")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RecordID");

                    b.HasIndex("MemberID");

                    b.ToTable("LoginRecord");
                });

            modelBuilder.Entity("MemberAccount", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Email");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberAccount");
                });

            modelBuilder.Entity("MemberPicture", b =>
                {
                    b.Property<string>("Picture")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.HasKey("Picture");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberPicture");
                });

            modelBuilder.Entity("MemberStatus", b =>
                {
                    b.Property<string>("StatusCode")
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("StatusCode");

                    b.ToTable("MemberStatus");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<long>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<bool>("Readed")
                        .HasColumnType("bit");

                    b.HasKey("NotificationID");

                    b.HasIndex("MemberID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<long>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderID"));

                    b.Property<long?>("EmployeeID")
                        .HasColumnType("bigint");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<string>("Note")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("oTel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OrderID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("MemberID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("OrderDetail", b =>
                {
                    b.Property<long>("OrderID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductID")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingMethodCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.HasKey("OrderID", "ProductID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("PayType", b =>
                {
                    b.Property<string>("PayCode")
                        .HasMaxLength(2)
                        .HasColumnType("nchar");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PayCode");

                    b.ToTable("PayType");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductID"));

                    b.Property<string>("CateID")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar");

                    b.Property<string>("CategoryCateID")
                        .HasColumnType("nchar(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Pricing")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("ProductNum")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("money");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nchar");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryCateID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("RehearsalStudio", b =>
                {
                    b.Property<long>("RehearsalStudioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RehearsalStudioID"));

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OutRentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RehearsalStudioName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("RehearsalStudioPhoto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("RentFeePerHour")
                        .HasColumnType("money");

                    b.Property<DateTime>("StartRentTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("RehearsalStudioID");

                    b.HasIndex("MemberID");

                    b.ToTable("RehearsalStudio");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.Property<long>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeatID"));

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreID")
                        .HasColumnType("bigint");

                    b.HasKey("SeatID");

                    b.HasIndex("MemberID")
                        .IsUnique();

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("AttendanceRecord", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Employee", "Employee")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Cart", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", "Member")
                        .WithMany("Carts")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Coupon", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", "Member")
                        .WithMany("Coupons")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Product", "Product")
                        .WithMany("Coupons")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EmployeeAccount", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Employee", "Employee")
                        .WithOne("EmployeeAccount")
                        .HasForeignKey("EmployeeAccount", "EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Event", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("Events")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Instrument", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("Instruments")
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Employee", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.EmployeeRole", "EmployeeRole")
                        .WithMany("Employee")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LifetimeLiveHouse.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeRole");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Member", b =>
                {
                    b.HasOne("MemberPicture", "MemberPicture")
                        .WithMany()
                        .HasForeignKey("Picture");

                    b.HasOne("MemberStatus", "MemberStatus")
                        .WithMany()
                        .HasForeignKey("StatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberPicture");

                    b.Navigation("MemberStatus");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.MemberVerificationStatus", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithOne("MemberVerificationStatus")
                        .HasForeignKey("LifetimeLiveHouse.Models.MemberVerificationStatus", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.PasswordResetToken", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", "Member")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.RegisteredEvent", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("ForumPosts")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Live", b =>
                {
                    b.HasOne("BandRole", null)
                        .WithMany("Lives")
                        .HasForeignKey("BandRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LoginRecord", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("LoginRecords")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemberAccount", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MemberPicture", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("MemberPictures")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", "Member")
                        .WithMany("Notifications")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Employee", null)
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("Orders")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryCateID");
                });

            modelBuilder.Entity("RehearsalStudio", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithMany("ReBooks")
                        .HasForeignKey("MemberID");
                });

            modelBuilder.Entity("Seat", b =>
                {
                    b.HasOne("LifetimeLiveHouse.Models.Member", null)
                        .WithOne("Seat")
                        .HasForeignKey("Seat", "MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BandRole", b =>
                {
                    b.Navigation("Lives");
                });

            modelBuilder.Entity("Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Employee", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("EmployeeAccount")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.EmployeeRole", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("LifetimeLiveHouse.Models.Member", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Coupons");

                    b.Navigation("Events");

                    b.Navigation("ForumPosts");

                    b.Navigation("Instruments");

                    b.Navigation("LoginRecords");

                    b.Navigation("MemberPictures");

                    b.Navigation("MemberVerificationStatus")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("ReBooks");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Coupons");
                });
#pragma warning restore 612, 618
        }
    }
}
